package io.github.jmkeyes.spring.boot.thrift.example;

import org.apache.thrift.*;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.async.TAsyncClient;
import org.apache.thrift.async.TAsyncClientFactory;
import org.apache.thrift.async.TAsyncClientManager;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolFactory;
import org.apache.thrift.transport.TNonblockingTransport;

import javax.annotation.Generated;
import java.util.HashMap;
import java.util.Map;

/**
 * This is a stub implementation of a Thrift service class.
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.12.0)")
public class ExampleService {
    public interface Iface {
        public void execute() throws TException;
    }

    public interface AsyncIface {
        public void execute(AsyncMethodCallback<Void> resultHandler) throws TException;
    }

    public static class Client extends TServiceClient implements Iface {
        public static class Factory implements TServiceClientFactory<Client> {
            public Factory() {
                // Nothing to see here.
            }

            public Client getClient(TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(TProtocol iprot, TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(TProtocol prot) {
            super(prot, prot);
        }

        public Client(TProtocol iprot, TProtocol oprot) {
            super(iprot, oprot);
        }

        public void execute() throws TException {
            // Nothing to see here.
        }
    }

    public static class AsyncClient extends TAsyncClient implements AsyncIface {
        public static class Factory implements TAsyncClientFactory<AsyncClient> {
            private TAsyncClientManager clientManager;
            private TProtocolFactory protocolFactory;

            public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void execute(AsyncMethodCallback<Void> resultHandler) throws TException {
            // Nothing to see here.
        }
    }

    public static class Processor<I extends Iface> extends TBaseProcessor<I> implements TProcessor {
        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, ProcessFunction<I, ? extends TBase>>()));
        }

        protected Processor(I iface, Map<String, ProcessFunction<I, ? extends TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, ProcessFunction<I, ? extends TBase>> getProcessMap(Map<String, ProcessFunction<I, ? extends TBase>> processMap) {
            return processMap;
        }
    }

    public static class AsyncProcessor<I extends AsyncIface> extends TBaseAsyncProcessor<I> {
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, AsyncProcessFunction<I, ? extends TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, AsyncProcessFunction<I, ? extends TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, AsyncProcessFunction<I, ? extends TBase, ?>> getProcessMap(Map<String, AsyncProcessFunction<I, ? extends TBase, ?>> processMap) {
            return processMap;
        }
    }
}
